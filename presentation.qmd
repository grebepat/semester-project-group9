---
title: "Presentation"
format: html
editor: visual
---

```{r}


install.packages("pacman")
library("pacman")

p_install("dplyr", force = FALSE)
p_install("ggplot2", force = FALSE)
p_install("readr", force = FALSE)
p_install("tidyr", force = FALSE)
p_install("sf", force = FALSE)
p_install("terra", force = FALSE)
p_install("tmap", force = FALSE)
p_install("zoo", force = FALSE)
p_install("units", force = FALSE)
p_install("plotly", force = FALSE)
p_install("patchwork", force = FALSE)
p_install("tidyverse", force = FALSE)
p_install("rjson", force = FALSE)
p_install("jsonlite", force = FALSE)
p_install("leaflet", force = TRUE)
p_install("shiny", force = TRUE)
p_install("XML", force = TRUE)
p_install("lubridate", force = TRUE)
p_install("ggh4x", force = TRUE)
p_install("forcats", force = TRUE)
p_install("purr", force = TRUE)
p_install("viridis", force = TRUE)

library("ggh4x")
library("dplyr")
library("ggplot2")
library("tidyr")
library("sf")
library("terra")
library("tmap")
library("zoo")
library("units")
library("plotly")
library("patchwork")
library("tidyverse")
library("rjson")
library("jsonlite")
library("leaflet")
library("XML")
library("lubridate")
library("shiny")
library("forcats")
library("purr")
library("viridis") 
```

# Visualizations for the presentation

```{r}


RColorBrewer::brewer.pal(11, "Spectral")

# Define the coordinates of the polygon
coords <- rbind(c(2681695, 1247822), c(2683188, 1247822), c(2683188, 1246616), c(2681695, 1246616), c(2681695, 1247822))

# Create a polygon
polygon <- st_polygon(list(coords))

# Convert to spatial object
extent <- st_sfc(polygon, crs = 2056)


housing <- st_intersection(housing, extent)
streets <- st_intersection(streets, extent)
surface <- st_intersection(surface, extent)



# Creating subsample of day one from raeubertochter

raeubertochter_raw <- st_intersection(raeubertochter_raw, extent)
raeubertochter_seg <- raeubertochter_seg |> 
  st_intersection(extent) |> 
  mutate(
    segment_id = as.numeric(segment_id),
    segment_id = as.factor(segment_id)
  )

raeubertochter_cor <- raeubertochter_cor |> 
  st_intersection(extent) |> 
  mutate(
    segment_id_cor = as.numeric(segment_id_cor),
    segment_id_cor = as.factor(segment_id_cor)
  )


# Palette for surface type
my_palette <- c("Acker, Wiese, Weide" = "white", "Bahngebiet" = "white", "befestigte Fläche"  = "white", "bestockte Fläche" = "white", "fliessendes Gewässer" = "white", "Flugplatz" = "white", "Gartenanlage" = "white", "Gebäude" = "white", "geschlossener Wald" = "white", "Hoch-, Flachmoor" = "white", "humusierte Fläche" = "white", "Intensivkultur" = "white", "Reben" = "white", "Schilfgürtel" = "white", "stehendes Gewässer" = "white", "Strasse, Weg" = "white", "Trottoir" = "white", "Verkehrsinsel" = "white", "Wasserbecken" = "white") 
                

my_palette2 <- c("#9E0142", "#F46D43", "#FFFF66", "#66C2A5","#3288BD", "#5E4FA2")

my_palette3 <- c("#9E0142", "#F46D43", "#FFFF66", "#3288BD",  "#5E4FA2")



# Overview
tm_shape(surface, bbox = extent) +
  tm_polygons(border.col = NULL, col = "art", palette = my_palette, legend.show = F, ) +
tm_shape(housing, bbox = extent) +
  tm_polygons(col = "grey25", border.col = "white", lwd = 0.5, alpha = .9) +
tm_shape(streets, bbox = extent) +
  tm_lines(lwd = "width", scale = 2.5, legend.lwd.show = FALSE) +
tm_layout(frame = FALSE) +
  tm_basemap(server = NULL)

# tmap_save(tm1, "presentation/overview.png", width = 250, height = 200, dpi = 1000, units = "mm")



# Raw Data from raeubertochter, day 1
subset_data <- raeubertochter_raw[seq(1, nrow(raeubertochter_raw), by = 2), ]

## Transparent
tm2 <- tm_shape(subset_data, bbox = extent) +
  tm_symbols(size = 0.7, col = "red",  alpha = 0.8, border.col = "NA") +
  tm_layout(frame = FALSE, bg.color = "transparent") 

tmap_save(tm2, "presentation/raeubertochter_raw_transparent.png", width = 250, height = 200, dpi = 1000, units = "mm",  bg="transparent")

## With background
 tm_shape(streets, bbox = extent) +
  tm_lines(lwd = "width", scale = 2.5, legend.lwd.show = FALSE) +
tm_shape(housing, bbox = extent) +
  tm_polygons(col = "grey25", border.col = "white", lwd = 0.5, alpha = .9) +
tm_shape(subset_data, bbox = extent) +
  tm_symbols(size = 0.6, col = "red",  alpha = 0.7, border.col = "NA") +
  tm_layout(frame = FALSE)  +
  tm_basemap(server = NULL)

tmap_save(tm3, "presentation/raeubertochter_raw.png", width = 250, height = 200, dpi = 1000, units = "mm")




# Raeubertochter segmented
subset_data2 <- raeubertochter_seg[seq(1, nrow(raeubertochter_seg), by = 2), ]

## Transparent
tm4 <- tm_shape(subset_data2, bbox = extent) +
  tm_symbols(size = 0.6, col = "segment_id", alpha = 0.8, border.col = "NA", palette = my_palette2, legend.col.show = F) +
  tm_layout(frame = FALSE, bg.color = "transparent") 

tmap_save(tm4, "presentation/raeubertochter_seg_transparent.png", width = 250, height = 200, dpi = 1000, units = "mm",  bg="transparent")

## With background
tm5 <- tm_shape(streets, bbox = extent) +
  tm_lines(lwd = "width", scale = 2.5, legend.lwd.show = FALSE) +
  tm_shape(housing, bbox = extent) +
  tm_polygons(col = "grey25", border.col = "white", lwd = 0.5, alpha = 0.9) +
tm_shape(subset_data2, bbox = extent) +
  tm_symbols(size = 0.6, col = "segment_id", alpha = 0.8, border.col = "NA", legend.col.show = F, palette = my_palette2) +
  tm_layout(frame = FALSE) 

tmap_save(tm5, "presentation/raeubertochter_seg.png", width = 250, height = 200, dpi = 1000, units = "mm")





# cor / tunnel / end_starting_points

first_last_points_raeubertochter <- first_last_points |> 
  filter(messenger == "raeubertochter")


tm6 <- tm_shape(first_last_points_raeubertochter, bbox = extent) +
  tm_symbols(size = 1, col = "gold", alpha = 0.8, border.col = "NA", legend.col.show = F, palette = my_palette2) +
  tm_layout(frame = FALSE, bg.color = "transparent") 

tmap_save(tm6, "presentation/first_last.png", width = 250, height = 200, dpi = 1000, units = "mm",  bg="transparent")




tm7 <- tm_shape(buffer_entry, bbox = extent) +
  tm_polygons(col = "red", border.col = "red", lwd = 0.5, alpha = 0.5) +
tm_shape(buffer_exit) +
  tm_polygons(col = "red", border.col = "red", lwd = 0.5, alpha = 0.5)+
tm_layout(frame = FALSE, bg.color = "transparent") 

tmap_save(tm7, "presentation/buffer.png", width = 250, height = 200, dpi = 1000, units = "mm",  bg="transparent")




subset_data3 <- raeubertochter_cor[seq(1, nrow(raeubertochter_cor), by = 2), ]

 tm8 <- tm_shape(subset_data3, bbox = extent) +
  tm_symbols(size = 0.6, col = "segment_id_cor", alpha = 0.8, border.col = "NA", palette = my_palette3, legend.col.show = F) +
  tm_layout(frame = FALSE, bg.color = "transparent") 


  
tmap_save(tm8, "presentation/merged.png", width = 250, height = 200, dpi = 1000, units = "mm", bg="transparent")







########################################## WEITERE IDEEN ####################################



ggplot() +
  geom_sf(data = streets, lwd = streets$width/50, color = "lightgrey", fill = NA) +
  scale_linetype_identity() +
  geom_sf(data = all_routes_seg_tunnel, color = "yellow", size = 0.001) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "black"),
    panel.background = element_rect(fill = "black")
  )


png(file="day1.png", width = 125, height= 116.75, units= "mm", res=1000)
p1
dev.off() 



# visualize two shifts


ggplot() +
  geom_point(data = raeubertochter_raw, aes(x, y), size = 0.01) +
  #geom_path(data = raeubertochter, aes(x, y)) +
  labs(y="y", x="x") +
  scale_y_continuous(limits = c(1246000, 1250000)) +
  scale_x_continuous(limits = c(min(raeubertochter_raw$x), max(raeubertochter_raw$x))) +
  guides(y = "axis_truncated",
         x = "axis_truncated") +
 coord_fixed(clip = "off") +
   theme_classic() +
  theme(axis.title.y = element_text(size = 6, margin = margin(t = 0, r = 15, b = 0, l = 0)),
        axis.title.x = element_text(size = 6, margin = margin(t = 10, r = 0, b = 0, l = 0)),
        axis.line = element_line(size=0.3),
        axis.text.x = element_text(size = 6, margin = margin(t = 7.5, r = 0, b = 0, l = 0)),
        axis.text.y = element_text(size = 6, margin = margin(t = 0, r = 7.5, b = 0, l = 0))) 


ggplot() +
  geom_point(data = raeubertochter_cor, aes(x, y, color = segment_id_cor), size = 0.01) +
  #geom_path(data = raeubertochter, aes(x, y)) +
  labs(y="y", x="x") +
  scale_y_continuous(limits = c(1246000, 1250000)) +
  scale_x_continuous(limits = c(min(raeubertochter_cor$x), max(raeubertochter_cor$x))) +
  guides(y = "axis_truncated",
         x = "axis_truncated") +
 coord_fixed(clip = "off") +
   theme_classic() +
  theme(axis.title.y = element_text(size = 6, margin = margin(t = 0, r = 15, b = 0, l = 0)),
        axis.title.x = element_text(size = 6, margin = margin(t = 10, r = 0, b = 0, l = 0)),
        axis.line = element_line(size=0.3),
        axis.text.x = element_text(size = 6, margin = margin(t = 7.5, r = 0, b = 0, l = 0)),
        axis.text.y = element_text(size = 6, margin = margin(t = 0, r = 7.5, b = 0, l = 0)),
        legend.position = "none") 




png(file="shifts.png", width = 200, height= 175, units= "mm", res=1000)
p2
dev.off() 

# visualize two shifts, but segmented

ggplot() +
  geom_point(data = all_routes_seg_tunnel, aes(x, y, color = segment_id_cor), size = 0.01) +
  geom_path(data = all_routes_seg_tunnel, aes(x, y, color = segment_id_cor)) +
  labs(y="y", x="x") +
  scale_x_continuous(limits = c(min(all_routes_seg_tunnel$x), max(all_routes_seg_tunnel$x))) +
  scale_y_continuous(limits = c(1246000, max(all_routes_seg_tunnel$y))) +
  guides(y = "axis_truncated",
         x = "axis_truncated") +
 # coord_fixed(clip = "off") +
   theme_classic() +
  theme(axis.title.y = element_text(size = 6, margin = margin(t = 0, r = 15, b = 0, l = 0)),
        axis.title.x = element_text(size = 6, margin = margin(t = 10, r = 0, b = 0, l = 0)),
        axis.line = element_line(size=0.3),
        axis.text.x = element_text(size = 6, margin = margin(t = 7.5, r = 0, b = 0, l = 0)),
        axis.text.y = element_text(size = 6, margin = margin(t = 0, r = 7.5, b = 0, l = 0)),
        legend.position = "none") 






ggplot() +
  geom_sf(data = strassen, lwd = strassen$width/50) +
  scale_linetype_identity() +
  geom_sf(data = gebaeude, alpha = 0.5) +
  scale_fill_manual("black") +
  theme_void()


ggplot() +
  geom_sf(data = gebaeude, fill = "black", color = "white") +
   theme_void()


raeubertochter_map <- leaflet(all_routes) |> 
  addTiles() |> 
  addCircleMarkers(lng = ~x,
                   lat = ~y)

raeubertochter_map



# Define the coordinates of the polygon
coords <- rbind(c(2682094, 1247370), c(2682094, 1247612), c(2682433, 1247612), c(2682433, 1247370), c(2682094, 1247370))

# Create a polygon
polygon <- st_polygon(list(coords))

# Convert to spatial object
extent4 <- st_sfc(polygon, crs = 2056)


housing1 <- st_intersection(housing, extent4)
streets1 <- st_intersection(streets, extent4)
surface1 <- st_intersection(surface, extent4)





tmap_mode("plot")


tm_shape(streets, bbox = extent4) + 
   tm_lines(lwd = "width", scale = 2.5, legend.lwd.show = FALSE) +
  tm_shape(housing, bbox = extent) +
  tm_polygons(col = "grey25", border.col = "white", lwd = 0.5, alpha = 0.9) +
tm_shape(nearest) + 
  tm_lines(lwd = 1) +
tm_shape(combined_vis$geometry) + 
  tm_dots(col = "purple", border.col = "purple", size = 0.6, alpha = .9, ) + 
tm_shape(near_to) + 
  tm_dots(col = "lightblue", size = 0.6, alpha = .9, border.col = "lightblue",) +
  tm_layout(frame = FALSE, bg.color = "transparent") 

tmap_save(tm_13, "presentation/map_matching.png", width = 250, height = 200, dpi = 1000, units = "mm")


# simplifiy trajectories
selected_rows <- raeubertochter_seg[seq(1, nrow(raeubertochter_seg), 3), ]

box <- st_bbox(selected_rows)



p1 <- ggplot() +
  geom_sf(data = housing_union, fill = "grey25", color = "grey60", lwd = 0.0001) +
  scale_x_continuous(limits = c(2678862, 2683984)) +
  scale_y_continuous(limits = c(1246197, 1249709)) +
   theme_void() +
  geom_point(data = selected_rows, aes(x, y, colour = "red")) +
    theme(legend.position = "none") 
 

  
anim = p1 + transition_time(time) +
    ease_aes('linear') +
   shadow_wake(wake_length = 0.5)



mygif <- animate(anim, width=800, height=800, nframes = 2187, renderer=gifski_renderer(loop=FALSE), rewind = FALSE)  
anim_save(filename="animation.gif", mygif)








tm_shape(housing_union) +
  tm_polygons(col = "grey25", border.col = "white", lwd = 0.5, alpha = .9) +
  tm_shape(selected_rows) +
  tm_dots(size = 0.7, col = "red",  alpha = 0.8, border.col = "NA") +
  tm_layout(frame = FALSE)

# Create the animation
tmap_animation(tm, filename = "animation.gif", width = 800, height = 800, delay = 40)













donner_seg <- filter(all_routes_seg, messenger == "donner")

```
