---
title: prepro
subtitle: blabla
author: maurin und patrick
date: "07/01/2024"
fig_caption: yes
format: 
  html:
    code-fold: true
    code-tools: true
    code-summary: "Show the code"
editor: source
df-print: paged
execute:
  warning: false
  message: false
  echo:    false
  error:   true
lang: en
---
# Install Packages

```{r import required libraries, warning = FALSE, message = FALSE}

#| echo: false
#| warning: false
#| message: false

options(repos = c(CRAN = "https://cran.rstudio.com"))

install.packages("pacman")
library("pacman")


p_install("dplyr", force = FALSE)
p_install("ggplot2", force = FALSE)
p_install("readr", force = FALSE)
p_install("tidyr", force = FALSE)
p_install("sf", force = FALSE)
p_install("terra", force = FALSE)
p_install("tmap", force = FALSE)
p_install("zoo", force = FALSE)
p_install("units", force = FALSE)
p_install("plotly", force = FALSE)
p_install("patchwork", force = FALSE)
p_install("tidyverse", force = FALSE)
p_install("rjson", force = FALSE)
p_install("jsonlite", force = FALSE)
p_install("leaflet", force = FALSE)
p_install("shiny", force = FALSE)
p_install("XML", force = FALSE)
p_install("lubridate", force = FALSE)
p_install("ggh4x", force = FALSE)
p_install("forcats", force = FALSE)
p_install("purrr", force = FALSE)
p_install("viridis", force = FALSE)
p_install("osrm", force = FALSE)
p_install("httr", force = FALSE)
p_install("hereR", force = FALSE)
p_install("geojson", force = FALSE)
p_install("sp", force = FALSE)
p_install("osmdata", force = FALSE)
p_install("ggpubr", force = TRUE)
p_install("gganimate", force = FALSE)
p_install("magick", force = FALSE)
p_install("gifski", force = FALSE)
p_install("png", force = FALSE)
p_install("grid", force = FALSE)
p_install("raster", force = FALSE)
p_install("gridExtra", force = FALSE)
p_install("RColorBrewer", force = FALSE)
p_install("mapview", force = FALSE)



library("ggh4x")
library("dplyr")
library("ggplot2")
library("tidyr")
library("sf")
library("sp")
library("terra")
library("tmap")
library("zoo")
library("units")
library("plotly")
library("patchwork")
library("tidyverse")
library("rjson")
library("jsonlite")
library("leaflet")
library("XML")
library("lubridate")
library("shiny")
library("forcats")
library("purrr")
library("viridis")
library("osrm")
library("httr")
library("geojsonsf")
library("here")
library("sp")
library("hereR")
library("osmdata")
library("gganimate")
library("magick")
library("gifski")
library("png")
library("grid")
library("gridExtra")
library("RColorBrewer")
library("mapview")




```

# Task 1: Import Express: Bringing GPS Data Onboard

Folgend werden alle .gpx-Files aus dem Ordner *GPS_Daten* eingelesen. Aus den .gpx-Files werden die Koordinaten herausgelesen und jede gefahrene Route / Aktivität in einem neuen Dataframe abgespeichert. Die Dataframes landen alle in einer Liste `single_routes` und können über diese abgerufen und dargestellt werden. In einer weiteren Variante werden alle Daten in einen einzigen Data Frame verpackt `all_routes`.

```{r import raw gps data}

#| warning: false
#| message: false
#| results: 'hide'

## generate a list of all filenames including the path from the subfolder they are stored in
file <- list.files("gps_files_shared", recursive = TRUE, pattern = "\\.gpx$", full.names = TRUE)


## Function to extract messenger and id from file path
extract_info <- function(file) {
  messenger <- as.factor(gsub(".*/gps_files_([^/]+)/.*", "\\1", file))
  id <- as.factor(paste(gsub('.*/(.*).gpx','\\1', file), gsub(".*/gps_files_([^/]+)/.*", "\\1", file), sep = "_"))
  list(messenger = messenger, id = id)
}


## Function to process each file
process_file <- function(file) {
  df <- st_read(file, "track_points")
  
  info <- extract_info(file)
  df$messenger <- info$messenger
  df$id <- info$id
  
  df_sf <- st_as_sf(df, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
  df_sf <- st_transform(df_sf, crs = 2056)
  df_sf$shift <- gsub('.*/(.*).gpx','\\1', file)
  df_sf$x <- st_coordinates(df_sf)[,1]
  df_sf$y <- st_coordinates(df_sf)[,2]
  df_sf <- select(df_sf, id, messenger, shift, time, x, y, ele, geometry)
  
  df_sf$origin <- file
  df_sf
}


## Apply the function to each file using purrr's map function
single_routes <- purrr::map(file, process_file)


## Combine all results
all_routes <- do.call(rbind, single_routes)

## Seperate file into raeubertochter and donner
raeubertochter_raw <- filter(all_routes, messenger == "raeubertochter")
donner_raw <- filter(all_routes, messenger == "donner")


## Get a quick overview
tmap_mode("plot")
tm_shape(all_routes) +
  tm_dots(col = "messenger", palette = "seq", border.col = NULL)

## Our raw data covers one shift per messenger, a total of 11'699 fixes were recorded:
### raeubertochter: 23.10.2023, 12:59:44 - 17:51:21, 7102 fixes
### donner: 30.01.2024, 10:21:41 - 22:14:27, 4597 fixes

```

# Task 2: Import Spatial Data

```{r import spatial data}

## All Spatial Data is stored in a geopackage called basic_data. Basic_data consists of several layers such as the street network, surface type or housing footprint. The layers were preprocessed and cliped to the extent of the city outline of zurich using Quantum GIS Version 3.34.5


## Show layers in basic_data.gpkg
st_layers("gis_files/basic_data.gpkg")


## Import street network from zurich, based on the swisstlm3d
streets <- read_sf("gis_files/basic_data.gpkg", "street_network_z") |> 
   select(objektart, geom) |> 
  mutate(
    objektart = as.factor(objektart),
    width = as.numeric(substr(objektart, start = 1, stop = 1)),
  ) |> 
  na.omit()


## Import city border of zurich
outline <- read_sf("gis_files/basic_data.gpkg", "city_outline")


## Import housing footprint of zurich
housing <- read_sf("gis_files/basic_data.gpkg", "housing_footprint") |> 
   select(objektart, geom) |>
  mutate(
    objektart = as.factor(objektart)
  )


## Import surface type of zurich
surface <- read_sf("gis_files/basic_data.gpkg", "surface_type") |> 
   select(art, geom) |> 
  mutate(
    art = as.factor(art)) |> 
 filter(art == "fliessendes Gewässer" | art == "stehendes Gewässer" | art == "Strasse, Weg" | art == "Verkehrsinsel") |> 
  na.omit()


## Import digital height model DHM25, a set of data representing the 3D form of the earth’s surface without vegetation and buildings
height <- terra::rast("gis_files/dhm25_zh.tif")


```

# Visualize raw Data

```{r visualize raw data,  fig.height= 6, fig.width=12}

## Visualize the raw gps data from each messenger


### Raeubertochter
p_raw_raeubertochter <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = raeubertochter_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
    theme_minimal() +
  theme(
    legend.position = "none"
  ) +
  labs(title = "Raeubertochter")


### Donner
p_raw_donner <- ggplot() +
  geom_sf(data = outline, alpha = 0) +
  geom_sf(data = donner_raw, aes(color = "red"), size = 0.6) +
  coord_sf(datum = st_crs(2056)) +
  labs(x = "E",
       y = "N") +
  theme_minimal() +
  theme(
    legend.position = "none"
  ) +
  labs(title = "Donner")

## Arrange plots together
grid.arrange(p_raw_raeubertochter,p_raw_donner, nrow=1, ncol=2)



## Next, we want to visualize a subsample of our raw data in a smaller spatial context
## visualize Subsample in spatial context
tmap_mode("plot")


## fixing an extent for a subsample of raeubertochter
coords <- rbind(c(2681695, 1247822), c(2683188, 1247822), c(2683188, 1246616), c(2681695, 1246616), c(2681695, 1247822))


## create an extent polygon
polygon <- st_polygon(list(coords))


## convert to spatial object
extent_raeubertochter <- st_sfc(polygon, crs = 2056)


## clip spatial data to extent to reduce data points and speed up computing
housing_raeubertochter <- st_intersection(housing, extent_raeubertochter)
streets_raeubertochter <- st_intersection(streets, extent_raeubertochter)
surface_raeubertochter <- st_intersection(surface, extent_raeubertochter)
raeubertochter_ext <- st_intersection(raeubertochter_raw, extent_raeubertochter)


## Reduce data set to every second gps fix to get a better overview
subset_raeubertochter_raw <- raeubertochter_ext[seq(1, nrow(raeubertochter_ext), by = 2), ]


## map including spatial context of zurich

tmap_mode("view")
tm_raw_context <- tm_shape(streets_raeubertochter, bbox = extent_raeubertochter) +
  tm_lines(lwd = "width", scale = 2.5, legend.lwd.show = FALSE) +
tm_shape(housing_raeubertochter, bbox = extent_raeubertochter) +
  tm_polygons(col = "grey25", border.col = "white", lwd = 0.5, alpha = .9) +
tm_shape(subset_raeubertochter_raw, bbox = extent_raeubertochter) +
  tm_symbols(size = 0.6, col = "red",  alpha = 0.7, border.col = "red", legend.col.show = FALSE) +
  tm_layout(frame = FALSE)


## show map
print(tm_raw_context)


## save as a png
tmap_save(tm_raw_context, "raeubertochter_raw.png", width = 250, height = 200, dpi = 250, units = "mm")



#################################################################################

## Browse trough raw_data

raw_data <- all_routes[seq(1, nrow(all_routes), by = 2), ]

tm_shape(raw_data) +
  tm_symbols(size = .25, col = "messenger",  alpha = 0.7, legend.col.show = FALSE, palette = c("red", "yellow"), border.col = "black", border.lwd = 0.1) +
  tm_layout(frame = FALSE) +
  tm_basemap(server = "CartoDB.PositronNoLabels", alpha = 0.75) +
  tm_view(symbol.size.fixed = F) +
  tm_facets(by = "messenger", sync = TRUE, ncol = 2)

##################################################################################

```
